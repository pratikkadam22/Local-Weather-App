{"ast":null,"code":"var _jsxFileName = \"H:\\\\PSU\\\\Spring\\\\react-frontend\\\\appen-weather\\\\src\\\\components\\\\UserComponent.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport DayCard from './DayCard';\nimport GetCity from '../services/GetCity';\nimport DegreeToggle from './DegreeToggle';\nimport Graph from './Graph';\nconst USERS_REST_API_URL = \"http://localhost:8080/api/getWeather\";\n\nclass UserComponent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      latitude: '',\n      longitude: '',\n      time: '',\n      city: '',\n      isSubmitted: false,\n      weatherData: [],\n      degreeType: \"fahrenheit\",\n      currentDay: 0\n    };\n\n    this.updateForecastDegree = event => {\n      this.setState({\n        degreeType: event.target.value\n      }, () => console.log(this.state));\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      axios.post(USERS_REST_API_URL, {\n        'latitude': this.state.latitude,\n        'longitude': this.state.longitude,\n        'time': this.state.time\n      }).then(response => {\n        if (response.data != null) {\n          this.setState({\n            weatherData: response.data\n          });\n          this.setState({\n            isSubmitted: true\n          });\n        }\n      });\n    };\n\n    this.degreeToggleButtons = () => {\n      if (this.state.isSubmitted) {\n        return /*#__PURE__*/React.createElement(DegreeToggle, {\n          degreeType: this.state.degreeType,\n          updateForecastDegree: this.updateForecastDegree,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 20\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      });\n    };\n\n    this.drawGraph = () => {\n      if (this.state.isSubmitted) {\n        // var degreeIndex = 1;\n        // if (this.state.degreeType == \"celsius\"){\n        //     degreeIndex = 0;\n        // }\n        // var hourly = [];\n        return this.state.weatherData.map((dayWeather, index) => {\n          if (index === this.state.currentDay) {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: \"d-flex justify-content-center\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 25\n              }\n            }, index, \" \", /*#__PURE__*/React.createElement(Graph, {\n              hourlyData: this.state.weatherData,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 80\n              }\n            }));\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }\n      });\n    };\n\n    this.formatDayCards = () => {\n      if (this.state.isSubmitted) {\n        console.log(this.state);\n        return this.state.weatherData.map((reading, index) => /*#__PURE__*/React.createElement(\"span\", {\n          onClick: () => this.updateDay(index),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 67\n          }\n        }, /*#__PURE__*/React.createElement(DayCard, {\n          reading: reading,\n          onClick: true,\n          key: index,\n          degreeType: this.state.degreeType,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }\n        })));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }, \"Press the above button to get Weather data\");\n    };\n  }\n\n  componentDidMount() {\n    let self = this;\n    navigator.geolocation.getCurrentPosition(function (position) {\n      self.setState({\n        latitude: position.coords.latitude.toString(),\n        longitude: position.coords.longitude.toString()\n      });\n      self.setState({\n        time: Math.round(new Date().getTime() / 1000).toString(),\n        city: GetCity.getCity(self.state.latitude, self.state.longitude)\n      }); // self.setState({ city: GetCity.getCity(self.state.latitude, self.state.longitude) })\n\n      console.log(self.state);\n    });\n  }\n\n  updateDay(dayIndex) {\n    this.setState({\n      currentDay: dayIndex\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, \"Weather Data\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      style: {\n        border: '3'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Click Here to get the Weather Report!\",\n      className: \"btn\",\n      style: {\n        flex: '3'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"display-3 jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, \"4-Day Forecast\"), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"display-5 text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, this.state.city), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, this.degreeToggleButtons()), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 52\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, this.formatDayCards()), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 23\n      }\n    }), this.drawGraph()));\n  }\n\n}\n\nexport default UserComponent;","map":{"version":3,"sources":["H:/PSU/Spring/react-frontend/appen-weather/src/components/UserComponent.js"],"names":["React","Component","axios","DayCard","GetCity","DegreeToggle","Graph","USERS_REST_API_URL","UserComponent","state","latitude","longitude","time","city","isSubmitted","weatherData","degreeType","currentDay","updateForecastDegree","event","setState","target","value","console","log","onSubmit","e","preventDefault","post","then","response","data","degreeToggleButtons","drawGraph","map","dayWeather","index","formatDayCards","reading","updateDay","componentDidMount","self","navigator","geolocation","getCurrentPosition","position","coords","toString","Math","round","Date","getTime","getCity","dayIndex","render","border","flex"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport DayCard from './DayCard'\r\nimport GetCity from '../services/GetCity'\r\nimport DegreeToggle from './DegreeToggle'\r\nimport Graph from './Graph'\r\n\r\nconst USERS_REST_API_URL = \"http://localhost:8080/api/getWeather\"\r\nclass UserComponent extends Component {\r\n    state = {\r\n        latitude: '',\r\n        longitude: '',\r\n        time: '',\r\n        city: '',\r\n        isSubmitted: false,\r\n        weatherData: [],\r\n        degreeType: \"fahrenheit\",\r\n        currentDay: 0\r\n    }\r\n\r\n    componentDidMount (){\r\n        let self = this;\r\n        navigator.geolocation.getCurrentPosition(function(position) {\r\n            self.setState({ latitude: position.coords.latitude.toString(),\r\n                longitude: position.coords.longitude.toString() });\r\n            self.setState({ time: Math.round((new Date()).getTime() / 1000).toString(),\r\n                        city: GetCity.getCity(self.state.latitude, self.state.longitude)});\r\n            // self.setState({ city: GetCity.getCity(self.state.latitude, self.state.longitude) })\r\n            console.log(self.state);\r\n        })\r\n    }\r\n\r\n    updateForecastDegree = event => {\r\n        this.setState({\r\n          degreeType: event.target.value\r\n        }, () => console.log(this.state))\r\n      }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        axios.post(USERS_REST_API_URL, {'latitude':this.state.latitude,\r\n                                        'longitude':this.state.longitude,\r\n                                        'time':this.state.time}).then(response => {\r\n            if (response.data != null) {\r\n                this.setState({ weatherData: response.data})\r\n                this.setState({isSubmitted: true})\r\n            }\r\n        });\r\n    }\r\n\r\n    degreeToggleButtons = () => {\r\n        if(this.state.isSubmitted){\r\n            return <DegreeToggle degreeType={this.state.degreeType} updateForecastDegree={this.updateForecastDegree}/>\r\n        }\r\n        return (<div></div>)\r\n    }\r\n\r\n    drawGraph = () => {\r\n        if(this.state.isSubmitted){\r\n            // var degreeIndex = 1;\r\n            // if (this.state.degreeType == \"celsius\"){\r\n            //     degreeIndex = 0;\r\n            // }\r\n            // var hourly = [];\r\n            return this.state.weatherData.map((dayWeather, index) => {\r\n            if (index === this.state.currentDay){\r\n                return (<div className=\"d-flex justify-content-center\">{index} <Graph hourlyData={this.state.weatherData}/></div>)\r\n            }\r\n        })\r\n    }\r\n        return (<div></div>)\r\n    }\r\n\r\n    updateDay(dayIndex) {\r\n        this.setState({ currentDay: dayIndex})\r\n    }\r\n    formatDayCards = () => {\r\n        if(this.state.isSubmitted){\r\n            console.log(this.state)\r\n            return this.state.weatherData.map((reading, index) => <span onClick={() => this.updateDay(index)}>\r\n                <DayCard reading={reading} onClick key={index} degreeType={this.state.degreeType} /></span>)\r\n        }\r\n        return (<div>Press the above button to get Weather data</div>)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className = \"text-center\">Weather Data</h1>\r\n                <form onSubmit={this.onSubmit} style={{ border: '3'}}>\r\n                <input \r\n                    type=\"submit\"\r\n                    value=\"Click Here to get the Weather Report!\"\r\n                    className=\"btn\"\r\n                    style={{flex: '3'}} />\r\n            </form>\r\n            <div className=\"container\">\r\n            <h1 className=\"display-3 jumbotron\">4-Day Forecast</h1>\r\n            <h5 className=\"display-5 text-muted\">{this.state.city}</h5>\r\n            <div>{this.degreeToggleButtons()}</div><br />\r\n                <div className=\"row justify-content-center\">\r\n                {this.formatDayCards()}\r\n                </div><br />\r\n                {this.drawGraph()}\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserComponent;"]},"metadata":{},"sourceType":"module"}