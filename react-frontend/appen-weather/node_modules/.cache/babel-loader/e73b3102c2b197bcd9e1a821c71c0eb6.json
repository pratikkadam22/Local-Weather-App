{"ast":null,"code":"var _jsxFileName = \"H:\\\\PSU\\\\Spring\\\\react-frontend\\\\appen-weather\\\\src\\\\components\\\\UserComponent.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport DayCard from './DayCard';\nimport GetCity from '../services/GetCity';\nimport DegreeToggle from './DegreeToggle';\nimport Graph from './Graph';\nimport GraphTitle from './GraphTitle';\nconst USERS_REST_API_URL = \"http://localhost:8080/api/getWeather\";\n\nclass UserComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: '',\n      longitude: '',\n      time: '',\n      city: '',\n      isSubmitted: false,\n      weatherData: [],\n      degreeType: \"fahrenheit\",\n      currentDay: 0\n    };\n\n    this.updateForecastDegree = e => {\n      // this.setState({\n      //   degreeType: event.target.value\n      // }, () => console.log(this.state.degreeType));\n      this.setState({\n        degreeIndex: e.target.value\n      });\n      this.drawGraph();\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      axios.post(USERS_REST_API_URL, {\n        'latitude': this.state.latitude,\n        'longitude': this.state.longitude,\n        'time': this.state.time\n      }).then(response => {\n        if (response.data != null) {\n          this.setState({\n            weatherData: response.data\n          });\n          this.setState({\n            isSubmitted: true\n          });\n        }\n      });\n    };\n\n    this.degreeToggleButtons = () => {\n      if (this.state.isSubmitted) {\n        return /*#__PURE__*/React.createElement(DegreeToggle, {\n          key: this.state.currentDay,\n          degreeType: this.state.degreeType,\n          updateForecastDegree: this.updateForecastDegree,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 20\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      });\n    };\n\n    this.graphTitle = () => {\n      if (this.state.isSubmitted) {\n        return /*#__PURE__*/React.createElement(GraphTitle, {\n          key: this.state.time,\n          time: this.state.time - 86400 * this.state.currentDay,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 20\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }\n      });\n    };\n\n    this.drawGraph = () => {\n      if (this.state.isSubmitted) {\n        var degreeIndex = 1;\n\n        if (this.state.degreeType === \"celsius\") {\n          degreeIndex = 0;\n        }\n\n        var h;\n\n        for (h in this.state.weatherData) {\n          if (parseInt(h) === this.state.currentDay) {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: \"d-flex justify-content-center\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 28\n              }\n            }, /*#__PURE__*/React.createElement(Graph, {\n              key: h,\n              hourlyData: this.state.weatherData[h][degreeIndex].hourly,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 75\n              }\n            }));\n          }\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      });\n    };\n\n    this.formatDayCards = () => {\n      if (this.state.isSubmitted) {\n        return this.state.weatherData.map((reading, index) => /*#__PURE__*/React.createElement(DayCard, {\n          reading: reading,\n          key: index,\n          index: index,\n          degreeType: this.state.degreeType,\n          updateDay: this.updateDay,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }\n      });\n    };\n\n    this.updateDay = this.updateDay.bind(this);\n  }\n\n  componentDidMount() {\n    let self = this;\n    navigator.geolocation.getCurrentPosition(function (position) {\n      self.setState({\n        latitude: position.coords.latitude.toString(),\n        longitude: position.coords.longitude.toString()\n      });\n      self.setState({\n        time: Math.round(new Date().getTime() / 1000).toString(),\n        city: GetCity.getCity(self.state.latitude, self.state.longitude)\n      });\n    });\n  }\n\n  updateDay(dayIndex) {\n    this.setState({\n      currentDay: dayIndex\n    });\n    this.graphTitle();\n    this.drawGraph();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-center display-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, \"Local Weather Data App\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Click Here to get the Weather Report!\",\n      className: \"btn btn-primary btn-lg active\",\n      style: {\n        flex: '3'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 20\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"display-3 jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, \"4-Day Forecast\"), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"display-5 text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, this.state.city), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, this.degreeToggleButtons()), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 52\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, this.formatDayCards()), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 23\n      }\n    }), this.graphTitle(), this.drawGraph()));\n  }\n\n}\n\nexport default UserComponent;","map":{"version":3,"sources":["H:/PSU/Spring/react-frontend/appen-weather/src/components/UserComponent.js"],"names":["React","Component","axios","DayCard","GetCity","DegreeToggle","Graph","GraphTitle","USERS_REST_API_URL","UserComponent","constructor","props","state","latitude","longitude","time","city","isSubmitted","weatherData","degreeType","currentDay","updateForecastDegree","e","setState","degreeIndex","target","value","drawGraph","onSubmit","preventDefault","post","then","response","data","degreeToggleButtons","graphTitle","h","parseInt","hourly","formatDayCards","map","reading","index","updateDay","bind","componentDidMount","self","navigator","geolocation","getCurrentPosition","position","coords","toString","Math","round","Date","getTime","getCity","dayIndex","render","flex"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport DayCard from './DayCard'\r\nimport GetCity from '../services/GetCity'\r\nimport DegreeToggle from './DegreeToggle'\r\nimport Graph from './Graph'\r\nimport GraphTitle from './GraphTitle'\r\n\r\nconst USERS_REST_API_URL = \"http://localhost:8080/api/getWeather\"\r\nclass UserComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.updateDay = this.updateDay.bind(this)\r\n    }\r\n    state = {\r\n        latitude: '',\r\n        longitude: '',\r\n        time: '',\r\n        city: '',\r\n        isSubmitted: false,\r\n        weatherData: [],\r\n        degreeType: \"fahrenheit\",\r\n        currentDay: 0\r\n    }\r\n\r\n    componentDidMount (){\r\n        let self = this;\r\n        navigator.geolocation.getCurrentPosition(function(position) {\r\n            self.setState({ latitude: position.coords.latitude.toString(),\r\n                longitude: position.coords.longitude.toString() });\r\n            self.setState({ time: Math.round((new Date()).getTime() / 1000).toString(),\r\n                        city: GetCity.getCity(self.state.latitude, self.state.longitude)});\r\n        })\r\n    }\r\n\r\n    updateForecastDegree = (e) => {\r\n        // this.setState({\r\n        //   degreeType: event.target.value\r\n        // }, () => console.log(this.state.degreeType));\r\n        this.setState({ degreeIndex: e.target.value });\r\n        this.drawGraph();\r\n      }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        axios.post(USERS_REST_API_URL, {'latitude':this.state.latitude,\r\n                                        'longitude':this.state.longitude,\r\n                                        'time':this.state.time}).then(response => {\r\n            if (response.data != null) {\r\n                this.setState({ weatherData: response.data})\r\n                this.setState({isSubmitted: true})\r\n            }\r\n        });\r\n    }\r\n\r\n    degreeToggleButtons = () => {\r\n        if(this.state.isSubmitted){\r\n            return <DegreeToggle key={this.state.currentDay} degreeType={this.state.degreeType} updateForecastDegree={this.updateForecastDegree}/>\r\n        }\r\n        return (<div></div>)\r\n    }\r\n\r\n    graphTitle = () => {\r\n        if(this.state.isSubmitted){\r\n\r\n            return <GraphTitle key={this.state.time} time={this.state.time - (86400*this.state.currentDay)} />\r\n        }\r\n        return (<div></div>)\r\n    }\r\n\r\n    drawGraph = () => {\r\n        if(this.state.isSubmitted){\r\n            var degreeIndex = 1;\r\n            if (this.state.degreeType === \"celsius\"){\r\n                degreeIndex = 0;\r\n            }\r\n            var h;\r\n            for (h in this.state.weatherData){\r\n                if (parseInt(h) === this.state.currentDay){\r\n                    return <div className=\"d-flex justify-content-center\"><Graph key={h} hourlyData={this.state.weatherData[h][degreeIndex].hourly}/></div>\r\n                }\r\n            }\r\n        }\r\n        return (<div></div>)\r\n    }\r\n\r\n    updateDay(dayIndex) {\r\n        this.setState({ currentDay: dayIndex})\r\n        this.graphTitle();\r\n        this.drawGraph();\r\n    }\r\n    formatDayCards = () => {\r\n        if(this.state.isSubmitted){\r\n            return this.state.weatherData.map((reading, index) =>\r\n                <DayCard reading={reading} key={index} index={index} degreeType={this.state.degreeType} updateDay={this.updateDay}/>)\r\n        }\r\n        return (<div></div>)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div><br />\r\n                <h1 className = \"text-center display-4\">Local Weather Data App</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                <input \r\n                    type=\"submit\"\r\n                    value=\"Click Here to get the Weather Report!\"\r\n                    className=\"btn btn-primary btn-lg active\"\r\n                    style={{flex: '3'}} />\r\n            </form><br />\r\n            <div className=\"container\">\r\n            <h1 className=\"display-3 jumbotron\">4-Day Forecast</h1>\r\n            <h5 className=\"display-5 text-muted\">{this.state.city}</h5>\r\n            <div>{this.degreeToggleButtons()}</div><br />\r\n                <div className=\"row justify-content-center\">\r\n                {this.formatDayCards()}\r\n                </div><br />\r\n                {this.graphTitle()}\r\n                {this.drawGraph()}\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserComponent;"]},"metadata":{},"sourceType":"module"}